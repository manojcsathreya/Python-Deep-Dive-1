'''
An example of *args is print function

Documentation
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
Print objects to the text stream file, separated by sep and followed by end. sep, end, file, and flush, if present, must be given as keyword arguments.

All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.

The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. Since printed arguments are converted to text strings, print() cannot be used with binary mode file objects. For these, use file.write(...) instead.

Whether the output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed.

*objects are acting like *args
'''

print(1,2,3, sep = '---',end='****************')
print(4,5,6,sep = '---',end = '****************')
#1---2---3****************4---5---6****************

import time
def time_it(fn, *args, **kwargs):
    print(args,kwargs)

time_it(print, 1,2,3 ,sep = '-', end = '*\n') #(1, 2, 3) {'sep': '-', 'end': '*\n'}


#wait. what? well what happened here was the same thing you did in the previous function
# print((1,2,3),{{'sep': '-', 'end': '*\n'}}) it just like specifying two positional args
# but we want print(1,2,3,sep = '-', end = '*\n') so we have to unpack this first

def time_it(fn, *args, **kwargs):
    fn(*args,**kwargs)
    
time_it(print, 1,2,3 ,sep = '-', end = '*\n') #1-2-3* BOOOM!!

def time_it(fn, rep = 5, *args, **kwargs):
    start = time.perf_counter()
    for i in range(rep):
        fn(*args,**kwargs)
    end = time.perf_counter()        
    print((end-start)/rep)
    
time_it(print, 5, 1,2,3 ,sep = '-', end = '*\n')
'''
1-2-3*
1-2-3*
1-2-3*
1-2-3*
1-2-3*
'''

def compute_power_1(n,*, start = 1, end):
    results = []
    for i in range(start,end):
        results.append(n**i)
    return results
    
compute_power_1(2, end= 5) #[2, 4, 8, 16]

def compute_power_2(n,*, start = 1, end):
    return [n**i for i in range(start,end)]

compute_power_2(2, end= 5) #[2, 4, 8, 16]

def compute_power_3(n,*,start = 1,end): 
    '''
    Thisfunction return generators but not list. so we have to explicitly convert them to list
 
    '''
    return (n**i for i in range(start,end))

compute_power_3(2, end= 5) #<generator object compute_power_3.<locals>.<genexpr> at 0x0000018A4C048740>
print(list(compute_power_3(2, end= 5)))

time_it(compute_power_1, rep = 5, n=2,start = 2, end = 20000) #0.5393829800013918

time_it(compute_power_2, rep = 5, n=2,start = 2, end = 20000) #0.5570689799991669

time_it(compute_power_3, rep = 5, n=2,start = 2, end = 20000) #2.6599998818710445e-0



'''
What happens at run-time…

When a module is loaded: all code is executed immediately

Module Code

a = 10        the integer object 10 is created and areferences it

def func(a):  he function object is created, and func references it
    print(a)

func(a)        the function is executed

What about default values?

Module Code

def func(a=10):     the function object is created, and funcreferences it
    print(a)        the integer object 10 is evaluated/created and is assigned as the default for a

func()              the function is executed


by the time this happens, the default value for ahas already been evaluated and assigned – it is not re-evaluated when the function is called



So what?

Consider this:
    
We want to create a function that will write a log entry to the console with a user-specified event 
date/time. If the user does not supply a date/time, we want to set it to the current date/time.

from datetime import datetime
def log(msg, *, dt=datetime.utcnow()):
    print('{0}: {1}'.format(dt, msg)


log('message 1')  → 2017-08-21 20:54:37.706994 : message 1


a few minutes later:
    
    
log('message 2')  → 2017-08-21 20:54:37.706994 : message 2

WAIT. Did the time kept constant?
What happens here is when the function is called the params are not assigned again and again until a new one is specified


Solution Pattern

We set a default for dt to None
Inside the function, we test to see if dt is still None. if dt is None, set it to the current date/time otherwise, use what the caller specified for dt

from datetime import datetime
def log(msg, *, dt=None):
    dt = dt or datetime.utcnow()
    print('{0}: {1}'.format(dt, msg)

In general, always beware of using a mutable object (or a callable) for an argument default

recall that this is equivalent to:
if not dt:
dt = datetime.utcnow()
'''

from datetime import datetime
print(datetime.utcnow())  #2022-01-24 17:01:24.170449

def log(msg, *, dt = datetime.utcnow()):
    print('{0} {1}'.format(dt,msg))
log('msg1') #2022-01-24 17:03:24.673477 msg1

log('msg2', dt = '2022-01-24 00:00:00.000000') #2022-01-24 00:00:00.000000 msg2

log('msg3') #2022-01-24 17:03:24.673477 msg3
#though after specifying the argument in previous function, log() did not get re initialized

#solution pattern

def log(msg,*,dt=None):
    dt = dt or datetime.utcnow()
    print("{0} {1}".format(dt,msg))
    
log('msg1') #2022-01-24 17:07:24.964539 msg1

log('msg2') #2022-01-24 17:07:39.042563 msg2

#we can see the difference.

'''
another gotcha with parameter defaults comes with mutable types, and is an easy trap to fall into.

Again, you have to remember that function parameter defaults are evaluated once, when the function is defined (i.e. when the module is loaded, or in this Jupyter notebook, when we "execute" the function definition), and not every time the function is called.

Consider the following scenario.

We are creating a grocery list, and we want our list to contain consistently formatted data with name, quantity and measurement unit:

bananas (2 units)
grapes (1 bunch)
milk (1 liter)
python (1 medium-rare)

To make sure the data is consistent, we want to use a function that we can call to add the item to our list.

So we'll need to provide it our current grocery list as well as the item information to be added:
'''

def add_item(name,quantity,unit,grocery_list):
    itm = '{0} ({1},{2})'.format(name, quantity,unit)
    grocery_list.append(itm)
    return grocery_list

store1 = []
store2 = []

add_item('bananas', 2, 'units', store1)
add_item('grapes', 1, 'bunch', store1)
add_item('python', 1, 'medium-rare', store2)

store1 # ['bananas (2,units)', 'grapes (1,bunch)']
store2 # ['python (1,medium-rare)']


#Ok, working great. But let's make the function a little easier to use - if the user does not supply an existing grocery list to append the item to, let's just go ahead and default our grocery_list to an empty list hence starting a new shopping list:
    
def add_item(name, quantity, unit, grocery_list=[]):
    item_fmt = "{0} ({1} {2})".format(name, quantity, unit)
    grocery_list.append(item_fmt)
    return grocery_list

store_1 = add_item('bananas', 2, 'units')
add_item('grapes', 1, 'bunch', store_1)
store_1 #['bananas (2 units)', 'grapes (1 bunch)']

# OK, so that seems to be working as expected. Let's start our second list:

store_2 = add_item('milk', 1, 'gallon')

store_2 #['bananas (2 units)', 'grapes (1 bunch)', 'milk (1 gallon)']

# WOAHHH

'''
??? What's going on? Our second list somehow contains the items that are in the first list.

What happened is that the returned value in the first call we made was the default grocery list - but remember that the list was created once and for all when the function was created not called. So everytime we call the function, that is the same list being used as the default.

When we started out first list, we were adding item to that default list.

When we started our second list, we were adding items to the same default list (since it is the same object).

We can avoid this problem using the same pattern as in the previous example we had with the default date time value. We use None as a default value instead, and generate a new empty list (hence starting a new list) if none was provided.
'''

def add_item(name, quantity, unit, grocery_list=None):
    if not grocery_list:
        grocery_list = []
    item_fmt = "{0} ({1} {2})".format(name, quantity, unit)
    grocery_list.append(item_fmt)
    return grocery_list

store_1 = add_item('bananas', 2, 'units')
add_item('grapes', 1, 'bunch', store_1) #['bananas (2 units)', 'grapes (1 bunch)']

store_2 = add_item('milk', 1, 'gallon')
store_2 #['milk (1 gallon)']

#Issue resolved!

'''

However, there are legitimate use cases (well, almost legitimate, often we're better off using a different approach that we'll see when we look at closures), but here's a simple one.

We want our function to cache results, so that we don't recalculate something more than once.

Let's say we have a factorial function, that can be defined recursively as:
 
n! = n * (n-1)!
'''
def factorial(n):
    if n < 1:
        return 1
    else:
        print('calculating {0}!'.format(n))
        return n * factorial(n-1)
factorial(3)
'''
calculating 3!
calculating 2!
calculating 1!
6
'''
#calling again
factorial(3)
'''
calculating 3!
calculating 2!
calculating 1!
6
'''
#As you can see we had to recalculate all those factorials the second time around. Let's cache the results leveraging what we saw in the previous example:

def factorial(n, cache={}):
    if n < 1:
        return 1
    elif n in cache:
        return cache[n]
    else:
        print('calculating {0}!'.format(n))
        result = n * factorial(n-1)
        cache[n] = result
        return result
    
factorial(3)
'''
calculating 3!
calculating 2!
calculating 1!
6
'''

#second time
factorial(3) #6

factorial(5)

#calculating 5!
#calculating 4!
#120





'''
Floats

The float class is Python's default implementation for representing real numbers

The Python (CPython) float is implemented using the C double type which (usually!) implements the IEEE 754 double-precision binary float, also called binary64

The float uses a fixed number of bytes → 8 bytes (but Python objects have some overhead too) → 24 bytes (CPython 3.6 64-bit)
                                       → 64 bits
                                       
These 64 bits are used up as follows:
sign → 1 bit
exponent → 11 bits  → range [-1022, 1023]  1.5E-5 → 1.5 x 10-5  exponent is -5
significant digits → 52 bits → 15-17 significant (base-10) digits

significant digits → for simplicity, all digits except leading and trailing zeros
1.2345 1234.5 12345000000 0.00012345 12345e-50 1.2345e10 -- all of them have 5 significant bits

While we represent floats in binary too, we cannot represent some
ex: (0.75) base 10 equivalent is (0.11)base 2
(0.11) base 2 = (1/2+1/4) = (0.5+0.25) = (0.75) base 10
(0.1101) base 2 = (1/2+1/4+0/8+1/16) = (0.8125) base 10
However, we cannot have accurate representation for some number,
ex: 1/10 = 0.1 base 10 does not ahve binary equivalent
0.1 base 10 = (0.0 0011 0011 0011.......) base 2
= 0/2+0/4+0/8+1/16+1/32+.....
= 1/16 + 1/32 + 1/256 + 1/512 + 1/4096 + 1/8192+.......
= 0.0625 + + 1/32 + 1/256 + 1/512 + 1/4096 + 1/8192+.......
= 0.09375 +  1/256 + 1/512 + 1/4096 + 1/8192+.......
=  0.09765625 + 1/512 + 1/4096 + 1/8192+.......
= 0.099609375 + 1/4096 + 1/8192+.......
=  0.0999755859375 + …

it contracts to 0.1. but never accurate
------------------------------------------------------------------------------------------------------

So, some numbers that do have a finite decimal representation, do not have a finite binary representation, 
and some do
(0.75) 10 = (0.11) 2                      finite    exact float representation
(0.8125) 10 = (0.1101) 2                  finite    exact float representation

(0.1) 10 = (0 0011 0011 0011 …) 2         infinite  approximate float representation


------------------------------------------------------------------------------------------------------


'''

print((float(10))        #10
print(float(10.45))     #10.45
print(float('10.45'))   #10.45

float(22/7)             #value error
from fractions import Fraction 
print(float(Fraction(22/7)))  #3.142857142857143

print(0.1)              #0.1
print(format(0.1, '.15f'))      #0.100000000000000
print(format(0.1, '.25f'))      #0.1000000000000000055511151

print(0.125)                      #0.125
print(format(0.125, '.15f'))      #0.125000000000000
print(format(0.125, '.25f'))      #0.1250000000000000000000000


'''
We saw that some decimal numbers (with a finite representation) cannot be represented with a finite binary representation
This can lead to some "weirdness" and bugs in our code (but not a Python bug!!)

x = 0.1 + 0.1 + 0.1
y = 0.3
x == y → False

format(x, '.25f')   → 0.3000000000000000444089210
format(y, '.25f')   → 0.2999999999999999888977698

Using rounding will not necessarily solve the problem either!
It is no more possible to exactly represent round(0.1, 1) than 0.1 itself
round(0.1, 1) + round(0.1, 1) + round(0.1, 1) == round(0.3, 1) → False

But it can be used to round the entirety of both sides of the equality comparison
round(0.1 + 0.1 + 0.1, 5) == round(0.3, 5) → True

This can be tweaked by specifying that the difference between the two numbers
be a percentage of their size →the smaller the number, the smaller the tolerance
i.e. are two numbers within x% of each other?
But there are non-trivial issues with using these seemingly simple tests
→numbers very close to zero vs away from zero

Using absolute tolerances…

x = 0.1 + 0.1 + 0.1
y = 0.3
print(format(x, '.20f')) → 0.30000000000000004441
print(format(y, '.20f')) → 0.29999999999999998890

Δ = 0.00000000000000005551
17th digit after decimal pt


a = 10000.1 + 10000.1 + 10000.1
b = 30000.3
print(format(a, '.20f')) → 30000.30000000000291038305
print(format(b, '.20f')) → 30000.29999999999927240424


Δ = 0.00000000000363797881
12th digit after decimal pt


Using an absolute tolerance: abs_tol = 10-15 = 0.000000000000001
then
math.fabs(x - y) < abs_tol  → True
math.fabs(a - b) < abs_tol  → False
-----------------------------------------------------------------------------------------------------------
Maybe we should use relative tolerances…
x = 0.1 + 0.1 + 0.1    → tol = 0.000003000000000
y = 0.3                

a = 10000.1 + 10000.1 + 10000.1
b = 30000.3           → tol = 0.300003000000000 

Using a relative tolerance: rel_tol = 0.001% = 0.00001 = 1e-5
i.e. maximum allowed difference between the two numbers,
relative to the larger magnitude of the two numbers

tol = rel_tol * max(|x|, |y|)


math.fabs(x - y) < tol  → True
math.fabs(a - b) < tol  → True

Success! but is it really?

x = 0.0000000001  (1e-10)
y = 0
Using a relative tolerance: rel_tol = 0.1% = 0.0001 = 1e-3
tol = rel_tol * max(|x|, |y|) → tol = rel_tol * |x| → 1e-3 * 1e-10 = 1e-13 

math.fabs(x - y) < abs_tol → False

Using a relative tolerance technique does not work well for numbers close to zero!

So using absolute and relative tolerances, in isolation, makes it difficult to get a one-size-fits-all solution

We can combine both methods

and using the larger of the two tolerances

calculating the absolute and relative tolerances

tol = max(rel_tol * max(|x|, |y|), abs_tol)

The math module has that solution for us! →PEP 485

math.isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) 

If you do not specify abs_tol, then it defaults to 0 and you will face the problem
we encountered in the last slide when comparing numbers close to zero.

x = 1000.0000001
y = 1000.0000002
math.isclose(x, y) →True

a = 0.0000001
b = 0.0000002
math.isclose(a, b) →False

but
math.isclose(x, y, abs_tol=1e-5) →True math.isclose(a, b, abs_tol=1e-5) →True

'''

a = 0.1+0.1+0.1
b = 0.3
print(a==b)                 # False
print(format(a , '0.25f'))  #0.3000000000000000444089210
print(format(b , '0.25f'))  #0.2999999999999999888977698

#however,

x = 0.125+0.125+0.125
y = 0.375
print(x==y)                 # True
print(format(x , '0.25f'))  #0.3750000000000000000000000
print(format(y , '0.25f'))  #0.3750000000000000000000000

#One simple way to get around this is to round to a specific number of digits and then compare
x = 0.1 + 0.1 + 0.1
y = 0.3
round(x, 5) == round(y, 5) #true

#We can also use isclose method
from math import isclose
x = 0.1 + 0.1 + 0.1
y = 0.3
isclose(x, y)  #True

x = 123456789.01
y = 123456789.02
isclose(x, y, rel_tol=0.01) #True

x = 0.01
y = 0.02
isclose(x, y, rel_tol=0.01) #False

#we have to be careful with relative tolerances when working with values that are close to zero:
x = 0.0000001
y = 0.0000002
isclose(x, y, rel_tol=0.01) #False
isclose(x, y, abs_tol=0.0001, rel_tol=0) #true


x = 0.0000001
y = 0.0000002

a = 123456789.01
b = 123456789.02

print('x = y:', isclose(x, y, abs_tol=0.0001, rel_tol=0.01)) ##x = y: True
print('a = b:', isclose(a, b, abs_tol=0.0001, rel_tol=0.01)) #a = b: True






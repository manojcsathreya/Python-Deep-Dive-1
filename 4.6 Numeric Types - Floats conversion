'''
Coercing to Integers
Float->Integer data loss

1.Truncation
2.Floor
3.Rounding
4. Celling

1.Truncation
truncating a float simply returns the integer portion of the number i.e. ignores everything after the decimal point
The math module provides us the trunc() function:

import math
math.trunc(10.4) -> 10
math.trunc(10.5) -> 10
math.trunc(10.6) -> 10
math.trunc(-10.4) -> -10
math.trunc(-10.5) -> -10
math.trunc(-10.6) -> -10

1.b The intConstructor

The Python int constructor will accept a float uses truncation when casting the float to an int

int(10.4) -> 10
int(10.5) -> 10
int(10.6) -> 10
int(-10.4) -> -10
int(-10.5) -> -10
int(-10.6) -> -10

2.Floor
Definition: the floor of a number is the largest integer less than (or equal to) the number
For positive numbers, floor and truncation are equivalent but not for negative numbers!
The math module provides us the floor() function:

import math

math.floor(10.4) -> 10
math.floor(10.5) -> 10
math.floor(10.6) -> 10

math.floor(-10.4) -> -11
math.floor(-10.5) -> -11
math.floor(-10.6) -> -11

3.Ceiling
Definition: the ceiling of a number is the smallest integer greater than (or equal to) the number
math.ceil(10.4) -> 11
math.ceil(10.5) -> 11
math.ceil(10.6) -> 11

math.ceil(-10.4) -> -10
math.ceil(-10.5) -> -10
math.ceil(-10.6) -> -10
'''




from math import trunc
trunc(10.3),trunc(10.5),trunc(10.7)             #(10, 10, 10)
trunc(-10.4),trunc(-10.5),trunc(-10.8)          #(-10, -10, -10)

#The int constructor uses truncation when a float is passed in:
int(10.3), int(10.5), int(10.6)                 #(10, 10, 10)
int(-10.5), int(-10.5), int(-10.4)               #(-10, -10, -10)

from math import floor
floor(10.4), floor(10.5), floor(10.6)           #(10, 10, 10)
floor(-10.4), floor(-10.5), floor(-10.6)        #(-11, -11, -11)

from math import ceil
ceil(10.4), ceil(10.5), ceil(10.6)              #(11, 11, 11)
ceil(-10.4), ceil(-10.5), ceil(-10.6)           #(-10, -10, -10)



'''
The round() function
Python provides a built-in rounding function: round(x, n=0)
This will round the number x to the closest multiple of you might think of this as rounding to a certain number of digits after the decimal point
which would work for positive n, but n can, in fact, also be negative!
In addition to truncate, floor, and ceiling, we can therefore also use rounding (with n = 0) to coerce a float to an integer number
If n is not specified, then it defaults to zero and round(x) will therefore return an int

round(x, n) → same type as x
round(x, 0) → same type as x
round(x) → int

it rounds to the vlaue of 10^-n
so if n has value 1, then it rounds up to 10^-1 = 0.1
and if has a value of -1, then it rounds upto the value of 10^1 = 10th place

round(1.23) → 1
round(1.23, 1) → 1.2
round(18.2, -1) → 20


When talking about the ties that is rounding of numbers ending with 5
We probably would expect round(1.25, 1) to be 1.3
Similarly, we would expect round(-1.25, 1) to result in -1.3
But in fact: 
round(1.25, 1) → 1.2 towards 0
round(1.35, 1) → 1.4 away from 0

round(-1.25, 1) → -1.2  towards 0
round(-1.35, 1) → -1.4  away from 0

This happens because of bankers rounding.
IEEE 754 standard: rounds to the nearest value, with ties rounded to the nearest value with an 
even least significant digit

round(1.25, 1) → 1.2 here to round to the least significant bit should be either 2 or 3. But 2 is even
so 1.2 will be the answer

round(1.35, 1) → 1.4 here to round to the least significant bit should be either 3 or 4. But 4 is even
so 1.4 will be the answer

round(15, -1) → 20
round(25, -1) → 20

Why Banker's Rounding?
Less biased rounding than ties away from zero

Consider averaging three numbers, and averaging the rounded  value of each:

Numbers:                0.5, 1.5, 2.5   →avg = 4.5 / 3 = 1.5

"standard" rounding:    1, 2, 3         →avg = 6 / 3 = 2

banker's rounding:      0, 2, 2         →avg = 4 / 3 = 1.3…


If you really insist on rounding away from zero…
One common (and partially incorrect) way to round to nearest unit that often comes up
on the web is:
    
int(x + 0.5)    10.3 → int(10.3 + 0.5) = int(10.8) = 10
                10.9 → int(10.9 + 0.5) = int(11.4) = 11
                10.5 → int(10.5 + 0.5) = int(11.0) = 11
but, this does not work for negative numbers
                -10.3 → int(-10.3 + 0.5) = int(-9.8) = -9
                -10.9 → int(-10.9 + 0.5) = int(-10.4) = -10
                -10.5 → int(-10.5 + 0.5) = int(-10.0) = -10

How do we handle this?
1. we take the sign of number
2. take abs vlaues of the number
3. int(abs(x)+0.5)
4. append the sign of x to value obtained in step 4


Ex:
10.4: 
1. Sign is +ve
2. 10.4
3. 10.4 + 5 = 10.9
4. int(10.9)*1 = 10

10.5: 
1. Sign is +ve
2. 10.5
3. 10.5 + 5 = 11
4. int(11.0)*1 = 11

-10.4: 
1. Sign is -ve
2. 10.4
3. 10.4 + 5 = 10.9
4. int(10.9)*-1 = -10

-10.5: 
1. Sign is -ve
2. 10.5
3. 10.5 + 5 = 11
4. int(11.0)*-1 = 11

Handling this in the python way
Oops! we do not have sign method in python.
We can use copysign from math module.
math.copysign(1,x)  - this function copies the sign of x and appends that to 1
so,
sign(x)             *    int(abs(x)+0.5)      can be written as 
math.copysign(1,x)  *    int(fabs(x)+0.5)

However, we have simple way of doing this

instead of 
int (sign(x)* fabs(x)+0.5)
int(x +copysign(0.5,x))

'''

a = round(1.5)
print(a,type(a))  #2 <class 'int'>

a = round(1.5,0)
print(a,type(a))  #2.0 <class 'float'>


print(round(1.8888,3),round(1.8888,2),round(1.8888,1),round(1.8888,0))   #1.889 1.89 1.9 2.0

round(888.88, 1), round(888.88, 0), \
round(888.88, -1), round(888.88, -2), \
round(888.88, -3)
#(888.9, 889.0, 890.0, 900.0, 1000.0)

round(1.35,1),\
round(1.25,1)       #(1.4, 1.2)

import math
def _round(x):
    return int(x+math.copysign(0.5, x))

round(2.5), _round(2.5)      #(2, 3)     
round(-2.5), _round(-2.5)    #(-2, -3)
